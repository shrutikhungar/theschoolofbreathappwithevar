{"version":3,"sources":["util.ts"],"names":["setAlphaColor","color","opacity","newColor","startsWith","length","console","warn","_opacity","Math","round","min","max","toString","toUpperCase","adaptiveColor","backgroundColor","foregroundColor","bgColor","substring","rgb","parseInt","red","green","blue","brightness","error"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,KAAD,EAAgBC,OAAe,GAAG,CAAlC,KAAgD;AAC3E,MAAIC,QAAQ,GAAGF,KAAf;;AAEA,MAAI,CAACE,QAAQ,CAACC,UAAT,CAAoB,GAApB,CAAD,IAA6BD,QAAQ,CAACE,MAAT,KAAoB,CAArD,EAAwD;AACtDC,IAAAA,OAAO,CAACC,IAAR,CAAa,0DAAb;AACAJ,IAAAA,QAAQ,GAAG,SAAX;AACD;;AAED,MAAID,OAAO,KAAK,CAAhB,EAAmB,OAAOC,QAAP;;AAEnB,QAAMK,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASF,IAAI,CAACG,GAAL,CAASV,OAAT,EAAkB,CAAlB,CAAT,EAA+B,CAA/B,IAAoC,GAA/C,CAAjB;;AACA,SAAOC,QAAQ,GAAGK,QAAQ,CAACK,QAAT,CAAkB,EAAlB,EAAsBC,WAAtB,EAAlB;AACD,CAZM;AAcP,OAAO,MAAMC,aAAa,GAAIC,eAAD,IAAqC;AAChE,QAAMC,eAAe,GAAG,CAAC,SAAD,EAAY,SAAZ,CAAxB;;AACA,MAAI;AACF;AACA,UAAMC,OAAO,GAAGF,eAAe,CAACG,SAAhB,CAA0B,CAA1B,CAAhB;AACA,UAAMC,GAAG,GAAGC,QAAQ,CAACH,OAAD,EAAU,EAAV,CAApB;AACA,UAAMI,GAAG,GAAIF,GAAG,IAAI,EAAR,GAAc,IAA1B;AACA,UAAMG,KAAK,GAAIH,GAAG,IAAI,CAAR,GAAa,IAA3B;AACA,UAAMI,IAAI,GAAIJ,GAAG,IAAI,CAAR,GAAa,IAA1B;AACA,UAAMK,UAAU,GAAG,SAASH,GAAT,GAAe,SAASC,KAAxB,GAAgC,SAASC,IAA5D;AAEA,WAAOC,UAAU,GAAG,GAAb,GAAmBR,eAAe,CAAC,CAAD,CAAlC,GAAwCA,eAAe,CAAC,CAAD,CAA9D;AACD,GAVD,CAUE,OAAOS,KAAP,EAAc;AACd,WAAOT,eAAe,CAAC,CAAD,CAAtB,CADc,CACa;AAC5B;AACF,CAfM","sourcesContent":["export const setAlphaColor = (color: string, opacity: number = 1): string => {\n  let newColor = color;\n\n  if (!newColor.startsWith('#') || newColor.length !== 7) {\n    console.warn('Make sure you set with full hex color value. Ex: #F00F00');\n    newColor = '#FFFFFF';\n  }\n\n  if (opacity === 1) return newColor;\n\n  const _opacity = Math.round(Math.min(Math.max(opacity, 0), 1) * 255);\n  return newColor + _opacity.toString(16).toUpperCase();\n};\n\nexport const adaptiveColor = (backgroundColor: string): string => {\n  const foregroundColor = ['#000000', '#FFFFFF'];\n  try {\n    /*eslint no-bitwise: [\"error\", { \"allow\": [\"&\", \">>\"] }] */\n    const bgColor = backgroundColor.substring(1);\n    const rgb = parseInt(bgColor, 16);\n    const red = (rgb >> 16) & 0xff;\n    const green = (rgb >> 8) & 0xff;\n    const blue = (rgb >> 0) & 0xff;\n    const brightness = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n\n    return brightness > 128 ? foregroundColor[0] : foregroundColor[1];\n  } catch (error) {\n    return foregroundColor[0]; // return black by default\n  }\n};\n"]}