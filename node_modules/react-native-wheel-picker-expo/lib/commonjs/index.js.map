{"version":3,"sources":["index.tsx"],"names":["WheelPickerExpo","PureComponent","React","createRef","props","backgroundColor","selectedIndex","itemHeight","listHeight","data","index","items","length","flatListRef","current","scrollToIndex","animated","componentDidUpdate","prevProps","setData","componentDidMount","gradientColor","Platform","select","ios","android","web","gradientContainerStyle","state","selectedStyle","height","borderColor","styles","gradientContainer","handleOnSelect","onChange","haptics","Math","abs","userTouch","Haptics","impactAsync","ImpactFeedbackStyle","Light","setState","item","additionalItem","label","value","render","width","initialSelectedIndex","flatListProps","_","toString","options","PickerItem","listItem","fontSize","handleOnPressItem","renderItem","e","onTouchStart","event","round","nativeEvent","contentOffset","y","offset","topGradient","borderBottomWidth","borderWidth","linearGradient","bottomGradient","borderTopWidth","Item","memo","fontColor","textAlign","color","indexSelected","style","onPress","gap","sizeText","StyleSheet","create","alignItems","justifyContent","position","flex","top","bottom"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  FlatList,\n  Text,\n  StyleSheet,\n  View,\n  Platform,\n  TouchableOpacity,\n} from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { adaptiveColor, setAlphaColor } from './util';\nimport type {\n  ItemType,\n  IViuPickerProps,\n  IViuPickerState,\n  RenderItemProps,\n} from './types';\nimport * as Haptics from 'expo-haptics';\n\nclass WheelPickerExpo extends PureComponent<IViuPickerProps, IViuPickerState> {\n  static defaultProps = {\n    items: [],\n    backgroundColor: '#FFFFFF',\n    width: 150,\n    haptics: false,\n  };\n\n  flatListRef = React.createRef<FlatList>();\n  backgroundColor = setAlphaColor(this.props.backgroundColor as any, 1);\n\n  state = {\n    selectedIndex: 0,\n    itemHeight: 40,\n    listHeight: 200,\n    data: [],\n  };\n\n  userTouch = false;\n\n  componentDidUpdate(prevProps: IViuPickerProps) {\n    if (this.props.items?.length !== prevProps.items?.length) {\n      this.setData();\n    }\n  }\n\n  componentDidMount() {\n    this.setData();\n  }\n\n  get gradientColor(): string {\n    return Platform.select({\n      ios: setAlphaColor(this.backgroundColor, 0.2),\n      android: setAlphaColor(this.backgroundColor, 0.4),\n      web: setAlphaColor(this.backgroundColor, 0.4),\n    }) as string;\n  }\n\n  get gradientContainerStyle() {\n    const { itemHeight } = this.state;\n    const { selectedStyle } = this.props;\n\n    return [\n      { height: 2 * itemHeight, borderColor: selectedStyle?.borderColor },\n      styles.gradientContainer,\n    ];\n  }\n\n  handleOnSelect(index: number) {\n    const { items, onChange, haptics } = this.props;\n    const selectedIndex = Math.abs(index);\n\n    if (selectedIndex >= 0 && selectedIndex <= items.length - 1) {\n      if (\n        haptics &&\n        this.userTouch &&\n        this.state.selectedIndex !== selectedIndex\n      ) {\n        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n      }\n\n      this.setState({ selectedIndex });\n      onChange &&\n        onChange({ index: selectedIndex, item: items[selectedIndex] });\n    }\n  }\n\n  handleOnPressItem = (index: number) => {\n    if (index >= 0 && index <= this.props.items.length - 1) {\n      this.flatListRef.current?.scrollToIndex({\n        animated: true,\n        index: index,\n      });\n    }\n  };\n\n  setData() {\n    let { itemHeight, listHeight } = this.state;\n    const { items, height } = this.props;\n\n    if (items?.length) {\n      const additionalItem = { label: '', value: null };\n      const data = [\n        additionalItem,\n        additionalItem,\n        ...items,\n        additionalItem,\n        additionalItem,\n      ] as ItemType[];\n\n      if (height) {\n        listHeight = height;\n        itemHeight = listHeight / 5;\n      }\n\n      this.setState({ data, itemHeight, listHeight });\n    }\n  }\n\n  render() {\n    const { data, itemHeight, listHeight, selectedIndex } = this.state;\n    const { width, initialSelectedIndex, flatListProps, selectedStyle } =\n      this.props;\n\n    if (!data.length) return;\n\n    return (\n      <View\n        style={{\n          height: listHeight,\n          width,\n          backgroundColor: this.backgroundColor,\n        }}\n      >\n        <FlatList\n          keyExtractor={(_, index) => index.toString()}\n          showsVerticalScrollIndicator={false}\n          renderItem={(options) =>\n            PickerItem(\n              options,\n              selectedIndex,\n              {\n                ...styles.listItem,\n                backgroundColor: this.backgroundColor,\n                fontSize: itemHeight / 2,\n                height: itemHeight,\n              },\n              this.handleOnPressItem,\n              this.props.renderItem as any\n            )\n          }\n          {...flatListProps}\n          onTouchStart={(e) => {\n            this.userTouch = true;\n            !!flatListProps?.onTouchStart && flatListProps.onTouchStart(e);\n          }}\n          ref={this.flatListRef}\n          initialScrollIndex={initialSelectedIndex}\n          data={data}\n          onScroll={(event) => {\n            let index = Math.round(\n              event.nativeEvent.contentOffset.y / itemHeight\n            );\n            this.handleOnSelect(index);\n          }}\n          getItemLayout={(_, index) => ({\n            length: itemHeight,\n            offset: index * itemHeight,\n            index,\n          })}\n          snapToInterval={itemHeight}\n        />\n        <View\n          style={[\n            this.gradientContainerStyle,\n            styles.topGradient,\n            { borderBottomWidth: selectedStyle?.borderWidth },\n          ]}\n          pointerEvents=\"none\"\n        >\n          <LinearGradient\n            style={styles.linearGradient}\n            colors={[this.backgroundColor, this.gradientColor]}\n          />\n        </View>\n        <View\n          style={[\n            this.gradientContainerStyle,\n            styles.bottomGradient,\n            { borderTopWidth: selectedStyle?.borderWidth },\n          ]}\n          pointerEvents=\"none\"\n        >\n          <LinearGradient\n            style={styles.linearGradient}\n            colors={[this.gradientColor, this.backgroundColor]}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n\nconst Item = React.memo(\n  ({ fontSize, label, fontColor, textAlign }: RenderItemProps) => (\n    <Text style={{ fontSize, color: fontColor, textAlign }}>{label}</Text>\n  )\n);\n\nconst PickerItem = (\n  { item, index }: any,\n  indexSelected: number,\n  style: any,\n  onPress: (index: number) => void,\n  renderItem: (props: RenderItemProps) => JSX.Element\n) => {\n  const gap = Math.abs(index - (indexSelected + 2));\n  const sizeText = [style.fontSize, style.fontSize / 1.5, style.fontSize / 2];\n\n  const fontSize = gap > 1 ? sizeText[2] : sizeText[gap];\n  const fontColor = adaptiveColor(style.backgroundColor);\n  const textAlign = 'center';\n\n  return (\n    <TouchableOpacity activeOpacity={1} onPress={() => onPress(index - 2)}>\n      <View style={style}>\n        {typeof renderItem === 'function' &&\n          renderItem({ fontSize, fontColor, label: item.label, textAlign })}\n        {!renderItem && (\n          <Item\n            fontSize={fontSize}\n            fontColor={fontColor}\n            textAlign={textAlign}\n            label={item.label}\n          />\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  listItem: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  gradientContainer: {\n    position: 'absolute',\n    width: '100%',\n  },\n  linearGradient: { flex: 1 },\n  topGradient: { top: 0 },\n  bottomGradient: { bottom: 0 },\n});\n\nexport default WheelPickerExpo;\n"]}